var _user$project$D3_Axis$render = function (axis) {
	var pairWithLabel = function (x) {
		return {
			ctor: '_Tuple2',
			_0: x,
			_1: axis.tickFormat(
				A2(_user$project$D3_Scale$invert, axis.scale, x))
		};
	};
	var line = F4(
		function (x1, y1, x2, y2) {
			return A2(
				_elm_lang$svg$Svg$line,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$svg$Svg_Attributes$x1(
						_user$project$D3_Format$px(x1)),
						_elm_lang$svg$Svg_Attributes$y1(
						_user$project$D3_Format$px(y1)),
						_elm_lang$svg$Svg_Attributes$x2(
						_user$project$D3_Format$px(x2)),
						_elm_lang$svg$Svg_Attributes$y2(
						_user$project$D3_Format$px(y2)),
						_elm_lang$svg$Svg_Attributes$stroke('black')
					]),
				_elm_lang$core$Native_List.fromArray(
					[]));
		});
	var spineCons = function () {
		var _p0 = axis.orientation;
		switch (_p0.ctor) {
			case 'Left':
				return A3(line, 0, 0, 0);
			case 'Right':
				return A3(line, 0, 0, 0);
			case 'Top':
				return A2(
					_elm_lang$core$Basics$flip,
					A2(line, 0, 0),
					0);
			default:
				return A2(
					_elm_lang$core$Basics$flip,
					A2(line, 0, 0),
					0);
		}
	}();
	var size = _elm_lang$core$Basics$abs(axis.scale.range.range);
	var spine = spineCons(size);
	var tickValues = function () {
		var _p1 = axis.ticks;
		if (_p1.ctor === 'Exactly') {
			var _p3 = _p1._0;
			return A2(
				_elm_lang$core$List$map,
				function (_p2) {
					return A2(
						F2(
							function (x, y) {
								return x * y;
							}),
						size / _elm_lang$core$Basics$toFloat(_p3),
						_elm_lang$core$Basics$toFloat(_p2));
				},
				_elm_lang$core$Native_List.range(0, _p3));
		} else {
			var _p4 = _p1._0;
			return A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return x * y;
					})(_p4),
				_elm_lang$core$Native_List.range(0, size / _p4));
		}
	}();
	var textSize = 12;
	var tickLength = 5;
	var tickWithLabel = F5(
		function (x1, y1, x2, y2, label) {
			var _p5 = function () {
				var _p6 = axis.orientation;
				switch (_p6.ctor) {
					case 'Left':
						return {ctor: '_Tuple4', _0: 0 - tickLength, _1: 0, _2: 'end', _3: 'middle'};
					case 'Right':
						return {ctor: '_Tuple4', _0: tickLength, _1: 0, _2: 'start', _3: 'middle'};
					case 'Top':
						return {ctor: '_Tuple4', _0: 0, _1: 0 - tickLength, _2: 'middle', _3: 'hanging'};
					default:
						return {ctor: '_Tuple4', _0: 0, _1: tickLength, _2: 'middle', _3: 'hanging'};
				}
			}();
			var xOffset = _p5._0;
			var yOffset = _p5._1;
			var anchor = _p5._2;
			var baseline = _p5._3;
			return A2(
				_elm_lang$svg$Svg$g,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A4(line, x1, y1, x2, y2),
						A2(
						_elm_lang$svg$Svg$text$,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$svg$Svg_Attributes$x(
								_user$project$D3_Format$px(x1 + xOffset)),
								_elm_lang$svg$Svg_Attributes$y(
								_user$project$D3_Format$px(y1 + yOffset)),
								_elm_lang$svg$Svg_Attributes$fontSize(
								_user$project$D3_Format$px(textSize)),
								_elm_lang$svg$Svg_Attributes$textAnchor(anchor),
								_elm_lang$svg$Svg_Attributes$alignmentBaseline(baseline)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$svg$Svg$text(label)
							]))
					]));
		});
	var tickCons = function () {
		var _p7 = axis.orientation;
		switch (_p7.ctor) {
			case 'Left':
				return function (_p8) {
					var _p9 = _p8;
					var _p10 = _p9._0;
					return A5(tickWithLabel, 0, _p10, 0 - tickLength, _p10, _p9._1);
				};
			case 'Right':
				return function (_p11) {
					var _p12 = _p11;
					var _p13 = _p12._0;
					return A5(tickWithLabel, 0, _p13, tickLength, _p13, _p12._1);
				};
			case 'Top':
				return function (_p14) {
					var _p15 = _p14;
					var _p16 = _p15._0;
					return A5(tickWithLabel, _p16, 0, _p16, 0 - tickLength, _p15._1);
				};
			default:
				return function (_p17) {
					var _p18 = _p17;
					var _p19 = _p18._0;
					return A5(tickWithLabel, _p19, 0, _p19, tickLength, _p18._1);
				};
		}
	}();
	var ticks = A2(
		_elm_lang$core$List$map,
		function (_p20) {
			return tickCons(
				pairWithLabel(_p20));
		},
		tickValues);
	return A2(
		_elm_lang$svg$Svg$g,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(_elm_lang$core$List_ops['::'], spine, ticks));
};
var _user$project$D3_Axis$tickFormat = F2(
	function (f, axis) {
		return _elm_lang$core$Native_Utils.update(
			axis,
			{tickFormat: f});
	});
var _user$project$D3_Axis$orient = F2(
	function (o, axis) {
		return _elm_lang$core$Native_Utils.update(
			axis,
			{orientation: o});
	});
var _user$project$D3_Axis$Axis = F4(
	function (a, b, c, d) {
		return {scale: a, ticks: b, orientation: c, tickFormat: d};
	});
var _user$project$D3_Axis$Right = {ctor: 'Right'};
var _user$project$D3_Axis$Left = {ctor: 'Left'};
var _user$project$D3_Axis$Bottom = {ctor: 'Bottom'};
var _user$project$D3_Axis$Top = {ctor: 'Top'};
var _user$project$D3_Axis$EachPx = function (a) {
	return {ctor: 'EachPx', _0: a};
};
var _user$project$D3_Axis$axis = function (scale) {
	return {
		scale: scale,
		ticks: _user$project$D3_Axis$EachPx(100),
		orientation: _user$project$D3_Axis$Bottom,
		tickFormat: _elm_lang$core$Basics$toString
	};
};
var _user$project$D3_Axis$tickSize = F2(
	function (s, axis) {
		return _elm_lang$core$Native_Utils.update(
			axis,
			{
				ticks: _user$project$D3_Axis$EachPx(s)
			});
	});
var _user$project$D3_Axis$Exactly = function (a) {
	return {ctor: 'Exactly', _0: a};
};
var _user$project$D3_Axis$ticks = F2(
	function (s, axis) {
		return _elm_lang$core$Native_Utils.update(
			axis,
			{
				ticks: _user$project$D3_Axis$Exactly(s)
			});
	});
