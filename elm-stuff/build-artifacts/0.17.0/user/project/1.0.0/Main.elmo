var _user$project$Main$formatDuration = F2(
	function (n, d) {
		var suffix = (_elm_lang$core$Native_Utils.cmp(n, 0) > 0) ? 's' : '';
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(d),
			suffix);
	});
var _user$project$Main$formatOrdinal = function (value) {
	var tenRemainder = A2(_elm_lang$core$Basics_ops['%'], value, 10);
	var hundredRemainder = A2(_elm_lang$core$Basics_ops['%'], value, 100);
	var diff = hundredRemainder - tenRemainder;
	var suffix = function () {
		var _p0 = {ctor: '_Tuple2', _0: diff, _1: tenRemainder};
		_v0_0:
		do {
			switch (_p0._1) {
				case 1:
					if (_p0._0 === 10) {
						break _v0_0;
					} else {
						return 'st';
					}
				case 2:
					if (_p0._0 === 10) {
						break _v0_0;
					} else {
						return 'nd';
					}
				case 3:
					if (_p0._0 === 10) {
						break _v0_0;
					} else {
						return 'rd';
					}
				default:
					if (_p0._0 === 10) {
						break _v0_0;
					} else {
						return 'th';
					}
			}
		} while(false);
		return 'th';
	}();
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(value),
		suffix);
};
var _user$project$Main$formatDate = function (date) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(
			_elm_lang$core$Date$month(date)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			' ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Main$formatOrdinal(
					_elm_lang$core$Date$day(date)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					', ',
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Date$year(date))))));
};
var _user$project$Main$formatFreq = function (freq) {
	var _p1 = freq;
	if (_p1.ctor === 'Once') {
		return 'once';
	} else {
		var _p2 = _p1._0;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'every ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p2),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(_user$project$Main$formatDuration, _p2, _p1._1))));
	}
};
var _user$project$Main$formatSchedule = function (sched) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Main$formatFreq(sched.freq),
		A2(
			_elm_lang$core$Basics_ops['++'],
			' starting on ',
			_user$project$Main$formatDate(sched.first)));
};
var _user$project$Main$formatMoney = function (money) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'$',
		_elm_lang$core$Basics$toString(money));
};
var _user$project$Main$viewTransaction = function (trans) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(
				A2(
					_elm_lang$core$String$join,
					' ',
					_elm_lang$core$Native_List.fromArray(
						[
							trans.name,
							'is',
							_user$project$Main$formatMoney(trans.amount),
							_user$project$Main$formatSchedule(trans.schedule)
						])))
			]));
};
var _user$project$Main$viewUpcoming = function (trans) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(
				A2(
					_elm_lang$core$String$join,
					' ',
					_elm_lang$core$Native_List.fromArray(
						[
							trans.name,
							'is',
							_user$project$Main$formatMoney(trans.amount),
							'on',
							_user$project$Main$formatDate(trans.date)
						])))
			]));
};
var _user$project$Main$applyTransaction = F2(
	function (trans, acc) {
		return {date: trans.date, amount: acc.amount + trans.amount};
	});
var _user$project$Main$summarizeAccount = F3(
	function (model, acc, upcoming) {
		var _p3 = _elm_lang$core$List$head(upcoming);
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[
					{date: model.now, amount: acc.balance}
				]);
		} else {
			return A3(
				_elm_lang$core$List$scanl,
				_user$project$Main$applyTransaction,
				{date: _p3._0.date, amount: acc.balance},
				upcoming);
		}
	});
var _user$project$Main$viewAccount = F2(
	function (model, acc) {
		var chart = A2(
			_user$project$Viz_LineChart$yAxis,
			_user$project$D3_Axis$tickFormat(
				function (_p4) {
					return _elm_lang$core$Basics$toString(
						_elm_lang$core$Basics$round(_p4));
				}),
			A2(
				_user$project$Viz_LineChart$xAxis,
				_user$project$D3_Axis$tickFormat(
					function (_p5) {
						return A3(
							_rluiten$elm_date_extra$Date_Extra_Format$format,
							_rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config,
							'%b %Y',
							_elm_lang$core$Date$fromTime(_p5));
					}),
				A2(
					_user$project$Viz_LineChart$height,
					300,
					A2(
						_user$project$Viz_LineChart$width,
						800,
						A2(
							_user$project$Viz_LineChart$chart,
							function (_p6) {
								return _elm_lang$core$Date$toTime(
									function (_) {
										return _.date;
									}(_p6));
							},
							function (_) {
								return _.amount;
							})))));
		var upcoming = A2(
			_user$project$Datatypes$projectTransactions,
			A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Year, 1, model.now),
			acc.transactions);
		var accountSummary = A3(_user$project$Main$summarizeAccount, model, acc, upcoming);
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h1,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								acc.name,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' - ',
									_user$project$Main$formatMoney(acc.balance))))
						])),
					A2(
					_elm_lang$html$Html$h2,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Upcoming Transactions Chart')
						])),
					A2(_user$project$Viz_LineChart$render, chart, upcoming),
					A2(
					_elm_lang$html$Html$h2,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Account Balance Chart')
						])),
					A2(_user$project$Viz_LineChart$render, chart, accountSummary),
					A2(
					_elm_lang$html$Html$h2,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Transactions')
						])),
					A2(
					_elm_lang$html$Html$ul,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(_elm_lang$core$List$map, _user$project$Main$viewTransaction, acc.transactions)),
					A2(
					_elm_lang$html$Html$h2,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Projection')
						])),
					A2(
					_elm_lang$html$Html$ul,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(_elm_lang$core$List$map, _user$project$Main$viewUpcoming, upcoming))
				]));
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$List$map,
			_user$project$Main$viewAccount(model),
			model.accounts));
};
var _user$project$Main$noFx = function (m) {
	return {ctor: '_Tuple2', _0: m, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$Main$update = F2(
	function (action, model) {
		var _p7 = action;
		return _user$project$Main$noFx(
			_elm_lang$core$Native_Utils.update(
				model,
				{now: _p7._0}));
	});
var _user$project$Main$AccountBalance = F2(
	function (a, b) {
		return {date: a, amount: b};
	});
var _user$project$Main$Now = function (a) {
	return {ctor: 'Now', _0: a};
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: {
				ctor: '_Tuple2',
				_0: _user$project$Datatypes$state0,
				_1: A3(_elm_lang$core$Task$perform, _user$project$Main$Now, _user$project$Main$Now, _elm_lang$core$Date$now)
			},
			subscriptions: function (_p8) {
				return _elm_lang$core$Platform_Sub$none;
			},
			update: _user$project$Main$update,
			view: _user$project$Main$view
		})
};
